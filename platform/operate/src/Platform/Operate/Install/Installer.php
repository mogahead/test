<?php namespace Platform\Operate\Install;
/**
 * Part of the Platform application.
 *
 * NOTICE OF LICENSE
 *
 * Licensed under the 3-clause BSD License.
 *
 * This source file is subject to the 3-clause BSD License that is
 * bundled with this package in the LICENSE file.  It is also available at
 * the following URL: http://www.opensource.org/licenses/BSD-3-Clause
 *
 * @package    Platform
 * @version    2.0.0
 * @author     Cartalyst LLC
 * @license    BSD License (3-clause)
 * @copyright  (c) 2011 - 2013, Cartalyst LLC
 * @link       http://cartalyst.com
 */

use Illuminate\Foundation\Application;
use Illuminate\Foundation\ConfigPublisher;

class Installer {

	/**
	 * Laravel application instance.
	 * 
	 * @var Illuminate\Foundation\Application
	 */
	protected $app;

	/**
	 * Create a new Platform instance.
	 *
	 * @param  Illuminate\Validation\Factory  $validation
	 * @return void
	 */
	public function __construct(Application $app)
	{
		$this->app = $app;
	}

	/**
	 * Returns if Platform is installed or not.
	 *
	 * @return bool
	 */
	public function isInstalled()
	{
		return (bool) $this->app['config']->get('platform/foundation::platform.installed_version', false);
	}

	/**
	 * Installs Platform by using the details
	 * for an installer repository.
	 *
	 * @param  Platform\Operate\Install\Repository  $repository
	 * @return void
	 */
	public function install(Repository $repository)
	{
		// Setup the database
		$this->setupDatabase($repository);

		// Great, now we need to install all extensions
		$extensionBag = $this->app['platform']->getExtensionBag();

		dd($extensionBag->allCore());
	}

	/**
	 * Sets up the database to work with Platform from the given
	 * repository.
	 *
	 * @param  Platform\Operate\Install\Repository  $repository
	 * @return void
	 */
	public function setupDatabase(Repository $repository)
	{
		// Check we're not installed
		if ($this->isInstalled())
		{
			throw new \RuntimeException('Cannot install Platform as it already appears installed.');
		}

		// Grab the database validator from the install repo
		$validator = $repository->getDatabaseConfigValidator();

		// If validation fails, let's just return the
		// messages in a list form.
		if ($validator->fails())
		{
			throw new \UnexpectedValueException(sprintf(
				'Invalid database configuration. %s',
				implode(' ', $validator->getMessages()->all(':message'))
			));
		}

		try
		{
			$repository->checkDatabaseConnection();
		}
		catch (\InvalidArgumentException $e)
		{
			// Invalid driver passed. Shouldn't happen due to validation.
			throw $e;
		}
		catch (\PDOException $e)
		{
			// We get a PDO exception when we have satisfied the connection
			// factory but haven't established a connection to the database.
			// Let's look at the code generated by PDO and determine what it
			// means.
			switch ($e->getCode())
			{
				// Invalid host
				case 2005:
					break;

				// Invalid credentials for host
				case 1045:
					break;

				// Can't access database
				case 1049:
					break;
				
				// Some other new error
				default:
					break;
			}

			// We're just going to throw the exception for the
			// client doing the installation to handle.
			throw $e;
		}

		// Okay, we can connect to the database. Let's
		// create our database configuration file so
		// that we can actually connect
		$this->createDatabaseConfig($repository);
	}

	/**
	 * Installs all core extensions for Platform
	 *
	 * @param  Platform\Operate\Install\Repository  $repository
	 * @return void
	 */
	public function installCoreExtensions(Repository $repository)
	{
		// Alright, database connection established. Let's now grab all
		// core extensions
		$extensionBag = $this->app['platform']->getExtensionBag();

		// Loop through core extensions
		foreach ($extensionBag->allCore() as $extension)
		{
			// Let's check if we're installed or not,
			// otherwise we'll get an exception thrown.
			// This also allows us to resume the installation
			// process should it get interrupted for whatever
			// reason.
			if ($extension->isInstalled())
			{
				continue;
			}

			// $extension->install();
		}
	}

	/**
	 * Updates the Platform installed version in the configuration
	 * file to match that of which is actually installed, or a particular
	 * version.
	 *
	 * @param  string  $version
	 * @return void
	 */
	public function updatePlatformInstalledVersion($version = null)
	{
		// Let's check if we've been published or not
		$configPath = $this->app['path'].'/config/packages/platform/foundation';
		$configFile = $configPath.'/platform.php';

		// If we haven't published our config
		if ( ! is_dir($configPath) or ! is_file($configFile))
		{
			$configPublisher = $this->app['config.publisher'];

			// @todo remove
			$configPublisher->setPackagePath($this->app['path.base']);

			$configPublisher->publishPackage('platform/foundation');

			// @todo remove
			$configPublisher->setPackagePath($this->app['path.base'].'/vendor');
		}

		// Version fallback
		if ($version === null)
		{
			$version = $this->app['platform']->version();
		}

		// Grab some resources
		$filesystem = $this->app['files'];

		// Let's replace the 'installed_version' property
		// with the actual installed version.
		$contents = preg_replace(
			'/\'installed_version\'(\s+|\t+)?\=>(\s+|\t+)?(\S+?),/',
			'\'installed_version\' => \''.$version.'\',',
			$filesystem->get($configFile)
		);

		// Just a triple check we can actually
		// write the configuration.
		if ($filesystem->put($configFile, $contents) === false)
		{
			throw new \RuntimeException("Could not write Platform config file to [$configFile].");
		}
	}

	/**
	 * Creates a database configuration file from the
	 * repository passed through.
	 *
	 * @param  Platform\Operate\Install\Repository  $repository
	 * @return void
	 */
	protected function createDatabaseConfig(Repository $repository)
	{
		$config     = $repository->getDatabaseConfig();
		$driver     = $repository->getDatabaseDriver();
		$filesystem = $this->app['files'];

		if ( ! $filesystem->exists($configFile = __DIR__.'/stubs/database/'.$driver.'.php'))
		{
			throw new \InvalidArgumentException("No config stub found for [{$config['driver']}] database driver.");
		}

		// Now, let's update our stub file with
		// our actual database credentials
		$contents = str_replace(
			array_map(function($key)
			{
				return '{{'.$key.'}}';
			}, array_keys($config)),
			array_values($config),
			$filesystem->get($configFile)
		);

		// Just a triple check we can actually
		// write the configuration.
		if ($filesystem->put(($newConfigFile = $this->app['path'].'/config/database.php'), $contents) === false)
		{
			throw new \RuntimeException("Could not write database config file to [$newConfigFile].");
		}
	}

}